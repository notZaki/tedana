"""
Integration tests for "real" data
"""

import os
import re
import glob
import shutil
import tarfile
from io import BytesIO
from gzip import GzipFile
from pkg_resources import resource_filename

import pytest
import requests
import pandas as pd

from tedana.workflows import tedana as tedana_cli
from tedana.workflows import t2smap as t2smap_cli
from tedana import io


def check_integration_outputs(fname, outpath):
    """
    Checks outputs of integration tests

    Parameters
    ----------
    fname : str
        Path to file with expected outputs
    outpath : str
        Path to output directory generated from integration tests
    """

    # Gets filepaths generated by integration test
    existing = [os.path.relpath(f, outpath) for f in
                glob.glob(os.path.join(outpath, '**'), recursive=True)[1:]]

    # Checks for log file
    log_regex = ('^tedana_'
                 '[12][0-9]{3}-[0-9]{2}-[0-9]{2}T[0-9]{2}'
                 '[0-9]{2}[0-9]{2}.tsv$')
    logfiles = [out for out in existing if re.match(log_regex, out)]
    assert len(logfiles) == 1

    # Removes logfile from list of existing files
    existing.remove(logfiles[0])

    # Compares remaining files with those expected
    with open(fname, 'r') as f:
        tocheck = f.read().splitlines()
    assert sorted(tocheck) == sorted(existing)


def download_test_data(osf, outpath):
    """
    Downloads tar.gz data stored at `osf` and unpacks into `outpath`

    Parameters
    ----------
    osf : str
        URL to OSF file that contains data to be downloaded
    outpath : str
        Path to directory where OSF data should be extracted
    """

    req = requests.get(osf)
    req.raise_for_status()
    t = tarfile.open(fileobj=GzipFile(fileobj=BytesIO(req.content)))
    os.makedirs(outpath, exist_ok=True)
    t.extractall(outpath)



def test_integration_three_echo_1(skip_integration=False):
    """ Integration test of the full tedana workflow using three-echo test data
    """

    if skip_integration:
        pytest.skip('Skipping three-echo integration test')
    out_dir = '/tmp/data/three-echo/TED.three-echo'
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)

    # download data and run the test
    download_test_data('https://osf.io/rqhfc/download',
                       os.path.dirname(out_dir))

    # Test re-running, but use the CLI
    args = (['-d', '/tmp/data/three-echo/three_echo_Cornell_zcat.nii.gz',
             '-e', '14.5', '38.5', '62.5',
             '--tedpca', 'mdl',
             '--out-dir', out_dir, '--debug', '--verbose'])
    tedana_cli._main(args)



def test_integration_three_echo_2(skip_integration=False):
    """ Integration test of the full tedana workflow using three-echo test data
    """

    if skip_integration:
        pytest.skip('Skipping three-echo integration test')
    out_dir = '/tmp/data/three-echo/TED.three-echo'
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)

    # download data and run the test
    download_test_data('https://osf.io/rqhfc/download',
                       os.path.dirname(out_dir))

    # Test re-running, but use the CLI
    args = (['-d', '/tmp/data/three-echo/three_echo_Cornell_zcat.nii.gz',
             '-e', '14.5', '38.5', '62.5',
             '--tedpca', 'mdl',
             '--out-dir', out_dir, '--debug', '--verbose'])
    tedana_cli._main(args)


def test_integration_three_echo_3(skip_integration=False):
    """ Integration test of the full tedana workflow using three-echo test data
    """

    if skip_integration:
        pytest.skip('Skipping three-echo integration test')
    out_dir = '/tmp/data/three-echo/TED.three-echo'
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)

    # download data and run the test
    download_test_data('https://osf.io/rqhfc/download',
                       os.path.dirname(out_dir))

    # Test re-running, but use the CLI
    args = (['-d', '/tmp/data/three-echo/three_echo_Cornell_zcat.nii.gz',
             '-e', '14.5', '38.5', '62.5',
             '--tedpca', 'mdl',
             '--out-dir', out_dir, '--debug', '--verbose'])
    tedana_cli._main(args)


def test_integration_three_echo_4(skip_integration=False):
    """ Integration test of the full tedana workflow using three-echo test data
    """

    if skip_integration:
        pytest.skip('Skipping three-echo integration test')
    out_dir = '/tmp/data/three-echo/TED.three-echo'
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)

    # download data and run the test
    download_test_data('https://osf.io/rqhfc/download',
                       os.path.dirname(out_dir))

    # Test re-running, but use the CLI
    args = (['-d', '/tmp/data/three-echo/three_echo_Cornell_zcat.nii.gz',
             '-e', '14.5', '38.5', '62.5',
             '--tedpca', 'mdl',
             '--out-dir', out_dir, '--debug', '--verbose'])
    tedana_cli._main(args)

def test_integration_three_echo_5(skip_integration=False):
    """ Integration test of the full tedana workflow using three-echo test data
    """

    if skip_integration:
        pytest.skip('Skipping three-echo integration test')
    out_dir = '/tmp/data/three-echo/TED.three-echo'
    if os.path.exists(out_dir):
        shutil.rmtree(out_dir)

    # download data and run the test
    download_test_data('https://osf.io/rqhfc/download',
                       os.path.dirname(out_dir))

    # Test re-running, but use the CLI
    args = (['-d', '/tmp/data/three-echo/three_echo_Cornell_zcat.nii.gz',
             '-e', '14.5', '38.5', '62.5',
             '--tedpca', 'mdl',
             '--out-dir', out_dir, '--debug', '--verbose'])
    tedana_cli._main(args)

